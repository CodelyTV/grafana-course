#####################################
############# grafana agent #########
#####################################
kind: Secret
apiVersion: v1
metadata:
  namespace: web-shop-app
  labels:
    app: grafana-agent
  name: grafana-agent-config
type: Opaque
stringData: 
  agent.yml: |
    server:
      log_level: info
    integrations:
      app_agent_receiver_configs:
        - autoscrape:
            enable: true
            metrics_instance: 'mimir'
          instance: 'frontend'
          logs_instance: 'loki'
          traces_instance: 'tempo'
          server:
            host: 0.0.0.0
            port: 12347
            cors_allowed_origins:
              - http://*
            api_key: 'secret' # optional, if set, client will be required to provide it via x-api-key header
          logs_labels: # labels to add to loki log record
            app: 'web-shop-frontend' # static value
            service: 'web-shop-frontend'
            kind: # value will be taken from log items. exception, log, measurement, etc
          logs_send_timeout: 5000
          sourcemaps:
            download: true # will download source file, extract source map location,

    metrics:
      wal_directory: /data/metrics/wal
      global:
        scrape_interval: 15s
        remote_write:
        - url: "${MIMIR_URL}"
          basic_auth:
            username: ${MIMIR_USR}
            password: ${MIMIR_KEY}
      configs:
        - name: mimir
          scrape_configs:
            - job_name: 'web-shop'
              static_configs:
                - targets: ['web-shop:3389']
                  labels:
                    group: 'shop'
                    service: 'web-shop'
                    app: web-shop
                    compose_service: web-shop
                    compose_project: web-shop-o11y-demo

            - job_name: 'shopping-cart'
              static_configs:
                - targets: ['shopping-cart:5555']
                  labels:
                    group: 'shop'
                    service: 'shopping-cart'
                    app: shopping-cart
                    compose_service: shopping-cart
                    compose_project: web-shop-o11y-demo

            - job_name: 'products'
              metrics_path: /actuator/prometheus
              static_configs:
                - targets: ['products:8080']
                  labels:
                    group: 'shop'
                    service: 'products'
                    app: products
                    compose_service: products
                    compose_project: web-shop-o11y-demo

            - job_name: 'span-metrics'
              static_configs:
                - targets: ['localhost:1234']
                  labels:
                    group: 'shop'
                    compose_project: web-shop-o11y-demo
              metric_relabel_configs:
              - source_labels: 
                  - service_name
                target_label: app

            - job_name: 'mysql'
              static_configs:
                - targets: ['mysql-exporter:9104']
                  labels:
                    group: 'shop'
                    service: 'mariadb'
                    app: mariadb
                    compose_service: mariadb
                    compose_project: web-shop-o11y-demo

            - job_name: 'broker'
              static_configs:
                - targets: ['broker:9779']
                  labels:
                    group: 'shop'
                    service: 'broker'
                    app: broker
                    compose_service: broker
                    compose_project: web-shop-o11y-demo

            - job_name: 'zookeeper'
              static_configs:
                - targets: ['zookeeper:9779']
                  labels:
                    group: 'shop'
                    service: 'zookeeper'
                    app: zookeeper
                    compose_service: zookeeper
                    compose_project: web-shop-o11y-demo

    logs:
      configs:
      - name: loki
        clients:
          - url: ${LOKI_URL}
            basic_auth:
              username: ${LOKI_USR}
              password: ${LOKI_KEY}
      positions_directory: /data/logs/positions

    traces:
      configs:
      - name: tempo
        receivers:
          otlp:
            protocols:
              grpc:
              http:
        remote_write:
          - endpoint: ${TEMPO_URL}
            basic_auth:
              username: ${TEMPO_USR}
              password: ${TEMPO_KEY}
        service_graphs:
           enabled: true
        spanmetrics:
          dimensions:
            - name: http.method
            - name: http.target
            - name: team.name
          handler_endpoint: 0.0.0.0:1234
        automatic_logging:
          backend: logs_instance
          logs_instance_name: loki
          roots: true
          processes: true
          spans: true
          span_attributes:
            - http.method
            - http.target
            - http.status_code
          overrides:
            trace_id_key: "traceID"

---
apiVersion: v1
kind: Service
metadata:
  namespace: web-shop-app
  labels:
    app: grafana-agent
  name: grafana-agent
spec:
  ports:
    - name: "http"
      port: 80
      targetPort: 80
    - name: "otel"
      port: 4317
      targetPort: 4317
    - name: "spanmetrics"
      port: 1234
      targetPort: 1234
  selector:
    app: grafana-agent
---
apiVersion: v1
kind: Service
metadata:
  namespace: web-shop-app
  labels:
    app: grafana-agent
  name: grafana-agent-external
spec:
  ports:
    - name: "front-end-receiver"
      port: 12347
      targetPort: 12347
  type: LoadBalancer
  selector:
    app: grafana-agent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: web-shop-app
  labels:
    app: grafana-agent
  name: grafana-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-agent
  template:
    metadata:
      labels:
        app: grafana-agent
    spec:
      containers:
        - name: grafana-agent
          image: grafana/agent:v0.28.1
          env:
          command: 
            - /bin/agent
            - -config.file=/etc/agent/agent.yml
            - -server.http.address=0.0.0.0:80
            - -enable-features=integrations-next
            - -config.enable-read-api
          ports:
            - containerPort: 80
            - containerPort: 4317
            - containerPort: 1234
            - containerPort: 12347
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/agent/
              name: grafana-agent-config
          livenessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
      volumes:
        - name: data
          emptyDir: {}
        - name: grafana-agent-config
          secret:
            secretName: grafana-agent-config
---
apiVersion: v1
kind: Service
metadata:
  namespace: web-shop-app
  labels:
    app: mysql-exporter
  name: mysql-exporter
spec:
  ports:
    - name: "core"
      port: 9104
      targetPort: 9104
  selector:
    app: mysql-exporter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: web-shop-app
  labels:
    app: mysql-exporter
  name: mysql-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-exporter
  template:
    metadata:
      labels:
        app: mysql-exporter
    spec:
      containers:
        - name: mysql-exporter
          image: prom/mysqld-exporter:v0.14.0
          env:
            - name: DATA_SOURCE_NAME
              value: root:myrootpassword@(mariadb:3306)/
          command: 
          ports:
            - containerPort: 9104
          volumeMounts:
          livenessProbe:
            httpGet:
              path: /metrics
              port: 9104
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /metrics
              port: 9104
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
      volumes: